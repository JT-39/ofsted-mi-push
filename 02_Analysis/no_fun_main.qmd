---
title: "Ofsted MI monthly data push (no functions)"
author: "Jake Tufts"
date-modified: "`r Sys.Date()`"
execute:
  message: false
  warning: false
resource_files:
- .Renviron
- config.yml
---

This Quarto file scrapes data from the Ofsted website and pushes it to
the relevant database.

The dataset is the 
[State-funded school inspections and outcomes: management information]({{< env url_ofsted_mi >}}){target="_blank"}
from Ofsted. The releases are monthly around the middle of the month
(10-20th).

This data is pushed into the SQL table `[Ofsted]`.

```{r}
#| label: load-functions 
  
source(here::here("R/helpers.R"))
```


```{r}
#| label: start-month

# Set the start date of the current month
start_month <- Sys.Date() |> 
  lubridate::floor_date(unit = "month")
```

## Scraping the Ofsted website

The code below pulls the required data off the Ofsted website.
A while loop is used to incrementally take off months from the current month
until it finds a url which it is able to pull data off (in theory this
is the previous available months data).
This is used in case a publication is delayed by a month, otherwise the
pipeline would fail.

```{r}
#| label: get-data
#| echo: true

# Set the date for the last day of the previous month and format it as "dd_MMM_YYYY"
ofsted_path <- NA
minus <- 0

while (is.na(ofsted_path)) {
  
  minus = minus + 1
  
  prev_month <- start_month |> 
    lubridate::`%m-%`(months(minus))
  
  url_month <- prev_month |> 
    lubridate::`day<-`(lubridate::days_in_month(prev_month)) |> 
    format(format = "%d_%b_%Y")
  
  # Define the URL of the webpage containing the links to CSV files
  url <- paste0("https://www.gov.uk/government/statistical-data-sets/monthly-",
                "management-information-ofsteds-school-inspections-outcomes")
  
  
  # Make an HTTP request to the URL
  resource <- httr::GET(url)
  
  
  # Parse the HTML content of the webpage
  parse <- XML::htmlParse(resource)
  
  # Extract the the latest Ofsted MI csv file from the webpage
  links <-
    tibble::tibble(WebLink = XML::xpathSApply(parse,
                                              path = "//a",
                                              XML::xmlGetAttr,
                                              "href")) |>
    dplyr::filter(
      grepl('https://assets.publishing.service.gov.uk/', WebLink),
      grepl('.csv', WebLink),
      grepl(url_month, WebLink),
      grepl(
        'Management_information_-_state-funded_schools_-_latest_inspections_',
        WebLink
      )
    )
  
  # Generate the path to the Ofsted CSV file
  ofsted_path <- links$WebLink[1]
}

latest_month <- prev_month |> 
  lubridate::`%m+%`(months(1))

# Download the CSV file from the web
ofsted_raw <- utils::read.csv(file = url(paste0(ofsted_path)))
```

```{r}
#| label: clean-data

# Read the downloaded CSV file and perform data cleaning
ofsted_clean <- ofsted_raw |>
  dplyr::mutate(
    `Web link` = iconv(`Web.link`,"WINDOWS-1252","UTF-8")
    ,`URN` = iconv(`URN`,"WINDOWS-1252","UTF-8")
    ,`LAESTAB` = iconv(`LAESTAB`,"WINDOWS-1252","UTF-8")
    ,`School name` = iconv(`School.name`,"WINDOWS-1252","UTF-8")
    ,`Ofsted phase` = iconv(`Ofsted.phase`,"WINDOWS-1252","UTF-8")
    ,`Type of education` = iconv(`Type.of.education`,"WINDOWS-1252","UTF-8")
    ,`School open date` = as.Date(`School.open.date`, "%d/%m/%Y") 
    ,`Admissions policy` = iconv(`Admissions.policy`,"WINDOWS-1252","UTF-8")
    ,`Sixth form` = iconv(`Sixth.form`,"WINDOWS-1252","UTF-8")
    ,`Designated religious character` = iconv(`Designated.religious.character`,"WINDOWS-1252","UTF-8")
    ,`Religious ethos` = iconv(`Religious.ethos`,"WINDOWS-1252","UTF-8")
    ,`Faith grouping` = iconv(`Faith.grouping`,"WINDOWS-1252","UTF-8")
    ,`Ofsted region` = iconv(`Ofsted.region`,"WINDOWS-1252","UTF-8")
    ,`Region` = iconv(`Region`,"WINDOWS-1252","UTF-8")
    ,`Local authority` = iconv(`Local.authority`,"WINDOWS-1252","UTF-8")
    ,`Parliamentary constituency` = iconv(`Parliamentary.constituency`,"WINDOWS-1252","UTF-8")
    ,`Postcode` = iconv(`Postcode`,"WINDOWS-1252","UTF-8")
    ,`The income deprivation affecting children index (IDACI) quintile` = iconv(`The.income.deprivation.affecting.children.index..IDACI..quintile`,"WINDOWS-1252","UTF-8")
    ,`Total number of pupils` = iconv(`Total.number.of.pupils`,"WINDOWS-1252","UTF-8")
    ,`Latest ungraded inspection number since last graded inspection` = iconv(`Latest.ungraded.inspection.number.since.last.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`Does the ungraded inspection relate to the URN of the current school?` = iconv(`Does.the.ungraded.inspection.relate.to.the.URN.of.the.current.school.`,"WINDOWS-1252","UTF-8")
    ,`URN at time of the ungraded inspection` = iconv(`URN.at.time.of.the.ungraded.inspection`,"WINDOWS-1252","UTF-8")
    ,`LAESTAB at time of the ungraded inspection` = iconv(`LAESTAB.at.time.of.the.ungraded.inspection`,"WINDOWS-1252","UTF-8")
    ,`School name at time of the ungraded inspection` = iconv(`School.name.at.time.of.the.ungraded.inspection`,"WINDOWS-1252","UTF-8")
    ,`School type at time of the ungraded inspection` = iconv(`School.type.at.time.of.the.ungraded.inspection`,"WINDOWS-1252","UTF-8")
    ,`Number of ungraded inspections since the last graded inspection` = iconv(`Number.of.ungraded.inspections.since.the.last.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`Date of latest ungraded inspection` = as.Date(`Date.of.latest.ungraded.inspection`, "%d/%m/%Y")
    ,`Ungraded inspection publication date` = as.Date(`Ungraded.inspection.publication.date`, "%d/%m/%Y")
    ,`Did the latest ungraded inspection convert to a graded inspection?` = iconv(`Did.the.latest.ungraded.inspection.convert.to.a.graded.inspection.`,"WINDOWS-1252","UTF-8")
    ,`Ungraded inspection overall outcome` = iconv(`Ungraded.inspection.overall.outcome`,"WINDOWS-1252","UTF-8")
    ,`Number of monitoring and urgent inspections since last graded inspection` = iconv(`Number.of.monitoring.and.urgent.inspections.since.last.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`Inspection number of latest graded inspection` = iconv(`Inspection.number.of.latest.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`Inspection type` = iconv(`Inspection.type`,"WINDOWS-1252","UTF-8")
    ,`Inspection type grouping` = iconv(`Inspection.type.grouping`,"WINDOWS-1252","UTF-8")
    ,`Event type grouping` = iconv(`Event.type.grouping`,"WINDOWS-1252","UTF-8")
    ,`nspection start date` = as.Date(`Inspection.start.date`, "%d/%m/%Y")
    ,`Inspection end date` = as.Date(`Inspection.end.date`, "%d/%m/%Y")
    ,`Publication date` = as.Date(`Publication.date`, "%d/%m/%Y")
    ,`Does the latest graded inspection relate to the URN of the current school?` = iconv(`Does.the.latest.graded.inspection.relate.to.the.URN.of.the.current.school.`,"WINDOWS-1252","UTF-8")
    ,`URN at time of latest graded inspection` = iconv(`URN.at.time.of.latest.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`LAESTAB at time of latest graded inspection` = iconv(`LAESTAB.at.time.of.latest.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`School name at time of latest graded inspection` = iconv(`School.name.at.time.of.latest.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`School type at time of latest graded.inspection` = iconv(`School.type.at.time.of.latest.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`Overall effectiveness` = iconv(`Overall.effectiveness`,"WINDOWS-1252","UTF-8")
    ,`Category of concern` = iconv(`Category.of.concern`,"WINDOWS-1252","UTF-8")
    ,`Quality of education` = iconv(`Quality.of.education`,"WINDOWS-1252","UTF-8")
    ,`Behaviour and attitudes` = iconv(`Behaviour.and.attitudes`,"WINDOWS-1252","UTF-8")
    ,`Personal development` = iconv(`Personal.development`,"WINDOWS-1252","UTF-8")
    ,`Effectiveness of leadership and management` = iconv(`Effectiveness.of.leadership.and.management`,"WINDOWS-1252","UTF-8")
    ,`Safeguarding is effective?` = iconv(`Safeguarding.is.effective.`,"WINDOWS-1252","UTF-8")
    ,`Early years provision (where applicable)` = iconv(`Early.years.provision..where.applicable.`,"WINDOWS-1252","UTF-8")
    ,`Sixth form provision (where applicable)` = iconv(`Sixth.form.provision..where.applicable.`,"WINDOWS-1252","UTF-8")
    ,`Previous graded inspection number` = iconv(`Previous.graded.inspection.number`,"WINDOWS-1252","UTF-8")
    ,`Previous inspection start date` = as.Date(`Previous.inspection.start.date`, "%d/%m/%Y")
    ,`Previous inspection end date` = as.Date(`Previous.inspection.end.date`, "%d/%m/%Y")
    ,`Previous publication date` = as.Date(`Previous.publication.date`, "%d/%m/%Y")
    ,`Does the previous graded inspection relate to the URN of the current school?` = iconv(`Does.the.previous.graded.inspection.relate.to.the.URN.of.the.current.school.`,"WINDOWS-1252","UTF-8")
    ,`URN at time of previous graded inspection` = iconv(`URN.at.time.of.previous.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`LAESTAB at time of previous graded inspection` = iconv(`LAESTAB.at.time.of.previous.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`School name at time of previous graded inspection` = iconv(`School.name.at.time.of.previous.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`School type at time of previous graded inspection` = iconv(`School.type.at.time.of.previous.graded.inspection`,"WINDOWS-1252","UTF-8")
    ,`Previous graded inspection overall effectiveness` = iconv(`Previous.graded.inspection.overall.effectiveness`,"WINDOWS-1252","UTF-8")
    ,`Previous category of concern` = iconv(`Previous.category.of.concern`,"WINDOWS-1252","UTF-8")
    ,`Previous quality of education` = iconv(`Previous.quality.of.education`,"WINDOWS-1252","UTF-8")
    ,`Previous behaviour and attitudes` = iconv(`Previous.behaviour.and.attitudes`,"WINDOWS-1252","UTF-8")
    ,`Previous personal development` = iconv(`Previous.personal.development`,"WINDOWS-1252","UTF-8")
    ,`Previous effectiveness of leadership and management` = iconv(`Previous.effectiveness.of.leadership.and.management`,"WINDOWS-1252","UTF-8")
    ,`Previous safeguarding is effective?` = iconv(`Previous.safeguarding.is.effective.`,"WINDOWS-1252","UTF-8")
    ,`Previous early years provision (where applicable)` = iconv(`Previous.early.years.provision..where.applicable.`,"WINDOWS-1252","UTF-8")
    ,`Previous sixth form provision (where applicable)` = iconv(`Previous.sixth.form.provision..where.applicable.`,"WINDOWS-1252","UTF-8")
    ,`DateStamp` = latest_month
  ) |>
  dplyr::select(
    `Web link` 
    ,`URN`
    ,`LAESTAB`
    ,`School name`
    ,`Ofsted phase` 
    ,`Type of education` 
    ,`School open date` 
    ,`Admissions policy`
    ,`Sixth form` 
    ,`Designated religious character` 
    ,`Religious ethos`
    ,`Faith grouping`
    ,`Ofsted region` 
    ,`Region`
    ,`Local authority`
    ,`Parliamentary constituency`
    ,`Postcode`
    ,`The income deprivation affecting children index (IDACI) quintile` 
    ,`Total number of pupils`
    ,`Latest ungraded inspection number since last graded inspection` 
    ,`Does the ungraded inspection relate to the URN of the current school?` 
    ,`URN at time of the ungraded inspection`
    ,`LAESTAB at time of the ungraded inspection`
    ,`School name at time of the ungraded inspection` 
    ,`School type at time of the ungraded inspection` 
    ,`Number of ungraded inspections since the last graded inspection` 
    ,`Date of latest ungraded inspection` 
    ,`Ungraded inspection publication date` 
    ,`Did the latest ungraded inspection convert to a graded inspection?` 
    ,`Ungraded inspection overall outcome` 
    ,`Number of monitoring and urgent inspections since last graded inspection`
    ,`Inspection number of latest graded inspection` 
    ,`Inspection type` 
    ,`Inspection type grouping` 
    ,`Event type grouping` 
    ,`nspection start date` 
    ,`Inspection end date`  
    ,`Publication date` 
    ,`Does the latest graded inspection relate to the URN of the current school?` 
    ,`URN at time of latest graded inspection`
    ,`LAESTAB at time of latest graded inspection` 
    ,`School name at time of latest graded inspection` 
    ,`School type at time of latest graded.inspection`
    ,`Overall effectiveness`
    ,`Category of concern` 
    ,`Quality of education`
    ,`Behaviour and attitudes`
    ,`Personal development` 
    ,`Effectiveness of leadership and management` 
    ,`Safeguarding is effective?`
    ,`Early years provision (where applicable)`
    ,`Sixth form provision (where applicable)` 
    ,`Previous graded inspection number` 
    ,`Previous inspection start date`
    ,`Previous inspection end date` 
    ,`Previous publication date` 
    ,`Does the previous graded inspection relate to the URN of the current school?` 
    ,`URN at time of previous graded inspection` 
    ,`LAESTAB at time of previous graded inspection` 
    ,`School name at time of previous graded inspection` 
    ,`School type at time of previous graded inspection` 
    ,`Previous graded inspection overall effectiveness` 
    ,`Previous category of concern` 
    ,`Previous quality of education`
    ,`Previous behaviour and attitudes`
    ,`Previous personal development`
    ,`Previous effectiveness of leadership and management`
    ,`Previous safeguarding is effective?` 
    ,`Previous early years provision (where applicable)` 
    ,`Previous sixth form provision (where applicable)` 
    ,`DateStamp`
  )
```

## Peek the data

Here is the head of the cleaned dataset.

```{r}
#| label: head-data
#| echo: false

ofsted_clean |> 
  utils::head() |> 
  dplyr::mutate(dplyr::across(dplyr::everything(),
                       ~truncate_text(.))) |> 
  stats::setNames(lapply(names(ofsted_clean),
                         truncate_text, max_length = 15)) |> 
  knitr::kable("html") |> 
  kableExtra::kable_styling(bootstrap_options = 
                              c("striped", "hover",
                                "condensed", "responsive")) |> 
  kableExtra::column_spec(1:ncol(ofsted_clean),
                          width_max = "130px")
```


## Push data to the database

```{r}
#| label: sql-connect

# Connect to the SQL Server database
db_dit <- config::get("cred_dit")

dit_conn <- DBI::dbConnect(
  odbc::odbc(),
  Driver = db_dit$driver,
  Server = db_dit$server,
  Database = db_dit$database,
  UID = db_dit$uid,
  PWD = db_dit$pwd,
  Trusted_Connection = db_dit$trusted
)
```

This code tests to see whether the month used to pull in the data from
the url already exists in the database. If it does it will throw up an
error message (currently just printed text). This is to stop duplication
of data due to the data being appended to the existing table.

```{r}
#| label: push-data
#| echo: true

# Test to see if data already exists in main database table
existing_months <- DBI::dbGetQuery(dit_conn, 
           "select distinct(DateStamp)
           from [", Sys.getenv("schema_final"), "].[Ofsted]"
)

if(!(latest_month %in% dplyr::pull(existing_months))) {
  # Write the cleaned data to the SQL Server database
  DBI::dbWriteTable(dit_conn,
                    DBI::Id(schema = Sys.getenv("schema_temp"),
                            table = "RG_MonthlyOfsted_Temp"),
                    ofsted_clean)
  
  # Insert the data from the temporary table into the main database table
  DBI::dbGetQuery(dit_conn,
                  paste0("insert into [", Sys.getenv("schema_final"), "].[Ofsted] ",
                         "select * ",
                         "from [", Sys.getenv("schema_temp"), "].[RG_MonthlyOfsted_Temp]"))
  
  # Drop the temporary table
  DBI::dbRemoveTable(dit_conn,
                     DBI::Id(schema = Sys.getenv("schema_temp"),
                             table = "RG_MonthlyOfsted_Temp"))
  
  print(glue::glue("Ofsted table pushed to {db_dit$database} database."))
  
} else {
  stop(htmltools::HTML(
    paste0(
      "This date was used to pull data: **",
      latest_month,
      "** \n",
      "Looks like data may already exist in the database.\n",
      "Please check the Oftsed MI website and SQL table ",
      "[", Sys.getenv("schema_final"), "].[Ofsted]."
    )
  ))
}

```


## Check data has been pushed to the database

Run this code in the database
(updating the date accordingly):

```{{SQL}}
select *
from [db_name].[schema].[Ofsted]
where DateStamp = convert(date, 'yyyy-mm-dd')
```


:::{.callout-tip title="Tip"}
To drop rows from the SQL table using a where condition use:

```{{SQL}}
delete
from [db_name].[shcema].[Ofsted]
where DateStamp = convert(date, 'yyyy-mm-dd')
```
:::

<br>

```{r}
#| label: get-releases

DBI::dbDisconnect(dit_conn)

# Get dates of next publication release and set reminder
page <- xml2::read_html(url)

# Extract the publication release date elements based on their CSS selector
raw_release_dates <- page |> rvest::html_nodes("tbody") |> rvest::html_text()

# Split the text into lines
lines <- strsplit(raw_release_dates, "\n")[[1]]
```

```{r}
#| label: format-releases

# Create a tibble
release_dates <- data.frame(
  "Release_date" = stringr::str_trim(head(lines[seq(1, length(lines), by = 2)],-1)),
  "Publication" = stringr::str_trim(lines[seq(2, length(lines), by = 2)])
)

# Filter for only future releases
future_releases <- release_dates |> 
  dplyr::mutate(Release_date = stringr::str_extract(Release_date, "\\d{1,2} \\w+ \\d{4}")) |> 
  datefixR::fix_date_df(c("Release_date")) |> 
  subset(Release_date > start_month)
```
